diff -uNr libbitcoind_orig/config_me.sh libbitcoind/config_me.sh
--- libbitcoind_orig/config_me.sh	1970-01-01 08:00:00.000000000 +0800
+++ libbitcoind/config_me.sh	2015-12-31 18:05:32.000000000 +0700
@@ -0,0 +1 @@
+./configure --enable-tests=no --enable-daemonlib --with-gui=no --without-qt --without-miniupnpc --without-bdb --enable-debug --disable-wallet --without-utils
diff -uNr libbitcoind_orig/configure.ac libbitcoind/configure.ac
--- libbitcoind_orig/configure.ac	2015-10-24 10:06:16.000000000 +0700
+++ libbitcoind/configure.ac	2016-01-02 01:54:53.000000000 +0700
@@ -126,6 +126,12 @@
   [use_reduce_exports=$enableval],
   [use_reduce_exports=auto])
 
+AC_ARG_ENABLE([daemonlib],
+  [AS_HELP_STRING([--enable-daemonlib],
+  [compile all of bitcoind as a library (default is no)])],
+  [use_daemonlib=$enableval],
+  [use_daemonlib=no])
+
 AC_ARG_ENABLE([ccache],
   [AS_HELP_STRING([--enable-ccache],
   [use ccache for building (default is yes if ccache is found)])],
@@ -409,6 +415,9 @@
 if test x$use_hardening != xno; then
   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS="$HARDENED_CXXFLAGS -Wstack-protector"])
   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS="$HARDENED_CXXFLAGS -fstack-protector-all"])
+  if test x$use_daemonlib = xno; then
+    AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS="$HARDENED_CXXFLAGS -fPIE"])
+  fi
 
   AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[
     AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE],[
@@ -422,7 +431,7 @@
   AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS="$HARDENED_LDFLAGS -Wl,-z,relro"])
   AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS="$HARDENED_LDFLAGS -Wl,-z,now"])
 
-  if test x$TARGET_OS != xwindows; then
+  if test x$TARGET_OS != xwindows -a x$use_daemonlib = xno; then
     # All windows code is PIC, forcing it on just adds useless compile warnings
     AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS="$HARDENED_CXXFLAGS -fPIE"])
     AX_CHECK_LINK_FLAG([[-pie]], [HARDENED_LDFLAGS="$HARDENED_LDFLAGS -pie"])
@@ -440,6 +449,16 @@
   OBJCXXFLAGS="$CXXFLAGS"
 fi
 
+AC_DEFINE([ENABLE_DAEMONLIB],[0],[Enable daemonlib.])
+AM_CONDITIONAL([ENABLE_DAEMONLIB],[false])
+if test x$use_daemonlib != xno; then
+  AX_CHECK_COMPILE_FLAG([-fPIC],[DAEMONLIB_CXXFLAGS="$DAEMONLIB_CXXFLAGS -fPIC"])
+  AC_DEFINE([ENABLE_DAEMONLIB],[1],[Enable daemonlib.])
+  AM_CONDITIONAL([ENABLE_DAEMONLIB],[true])
+  CXXFLAGS="$CXXFLAGS $DAEMONLIB_CXXFLAGS"
+  CPPFLAGS="$CPPFLAGS $DAEMONLIB_CPPFLAGS"
+  OBJCXXFLAGS="$CXXFLAGS"
+fi
 dnl this flag screws up non-darwin gcc even when the check fails. special-case it.
 if test x$TARGET_OS = xdarwin; then
   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS="$LDFLAGS -Wl,-dead_strip"])
@@ -485,15 +504,16 @@
   ]
 )
 
-if test x$use_reduce_exports != xno; then
+if test x$use_reduce_exports = xyes -a x$use_daemonlib = xno; then
   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS="-fvisibility=hidden"],
-  [
-    if test x$use_reduce_exports = xyes; then
-      AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduced-exports.])
-    fi
-    AC_MSG_WARN([Cannot set default symbol visibility. Disabling reduced exports.])
-    use_reduce_exports=no
-  ])
+  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])
+fi
+
+AC_MSG_CHECKING([whether to compile as daemonlib])
+if test x$use_daemonlib != xno; then
+  AC_MSG_RESULT([yes])
+else
+  AC_MSG_RESULT([no])
 fi
 
 LEVELDB_CPPFLAGS=
diff -uNr libbitcoind_orig/depends/hosts/linux.mk libbitcoind/depends/hosts/linux.mk
--- libbitcoind_orig/depends/hosts/linux.mk	2015-10-24 10:06:16.000000000 +0700
+++ libbitcoind/depends/hosts/linux.mk	2016-01-02 00:48:17.000000000 +0700
@@ -10,15 +10,15 @@
 linux_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC
 
 ifeq (86,$(findstring 86,$(build_arch)))
-i686_linux_CC=gcc -m32
-i686_linux_CXX=g++ -m32
+i686_linux_CC=${CC} -m32
+i686_linux_CXX=${CXX} -m32
 i686_linux_AR=ar
 i686_linux_RANLIB=ranlib
 i686_linux_NM=nm
 i686_linux_STRIP=strip
 
-x86_64_linux_CC=gcc -m64
-x86_64_linux_CXX=g++ -m64
+x86_64_linux_CC=${CC} -m64
+x86_64_linux_CXX=${CXX} -m64
 x86_64_linux_AR=ar
 x86_64_linux_RANLIB=ranlib
 x86_64_linux_NM=nm
diff -uNr libbitcoind_orig/depends/packages/bdb.mk libbitcoind/depends/packages/bdb.mk
--- libbitcoind_orig/depends/packages/bdb.mk	2015-10-24 10:06:16.000000000 +0700
+++ libbitcoind/depends/packages/bdb.mk	2016-01-02 00:48:17.000000000 +0700
@@ -9,6 +9,7 @@
 $(package)_config_opts=--disable-shared --enable-cxx --disable-replication
 $(package)_config_opts_mingw32=--enable-mingw
 $(package)_config_opts_linux=--with-pic
+$(package)_cxxflags_darwin=-stdlib=libc++
 endef
 
 define $(package)_preprocess_cmds
diff -uNr libbitcoind_orig/depends/packages/boost.mk libbitcoind/depends/packages/boost.mk
--- libbitcoind_orig/depends/packages/boost.mk	2015-10-24 10:06:16.000000000 +0700
+++ libbitcoind/depends/packages/boost.mk	2016-01-02 02:10:02.000000000 +0700
@@ -1,9 +1,8 @@
 package=boost
-$(package)_version=1_55_0
-$(package)_download_path=http://sourceforge.net/projects/boost/files/boost/1.55.0
+$(package)_version=1_57_0
+$(package)_download_path=http://sourceforge.net/projects/boost/files/boost/1.57.0
 $(package)_file_name=$(package)_$($(package)_version).tar.bz2
-$(package)_sha256_hash=fff00023dd79486d444c8e29922f4072e1d451fc5a4d2b6075852ead7f2b7b52
-$(package)_patches=darwin_boost_atomic-1.patch darwin_boost_atomic-2.patch
+$(package)_sha256_hash=910c8c022a33ccec7f088bd65d4f14b466588dda94ba2124e78b8c57db264967
 
 define $(package)_set_vars
 $(package)_config_opts_release=variant=release
@@ -11,7 +10,7 @@
 $(package)_config_opts=--layout=tagged --build-type=complete --user-config=user-config.jam
 $(package)_config_opts+=threading=multi link=static -sNO_BZIP2=1 -sNO_ZLIB=1
 $(package)_config_opts_linux=threadapi=pthread runtime-link=shared
-$(package)_config_opts_darwin=--toolset=darwin-4.2.1 runtime-link=shared
+$(package)_config_opts_darwin=--toolset=clang runtime-link=shared
 $(package)_config_opts_mingw32=binary-format=pe target-os=windows threadapi=win32 runtime-link=static
 $(package)_config_opts_x86_64_mingw32=address-model=64
 $(package)_config_opts_i686_mingw32=address-model=32
@@ -20,14 +19,14 @@
 $(package)_archiver_$(host_os)=$($(package)_ar)
 $(package)_toolset_darwin=darwin
 $(package)_archiver_darwin=$($(package)_libtool)
-$(package)_config_libraries=chrono,filesystem,program_options,system,thread,test
-$(package)_cxxflags=-fvisibility=hidden
-$(package)_cxxflags_linux=-fPIC
+$(package)_config_libraries=chrono,filesystem,program_options,system,thread
+$(package)_cxxflags=-fvisibility=default -fPIC
+$(package)_cxxflags_darwin=-std=c++11 -stdlib=libc++
+$(package)_linkflags=-stdlib=libc++
 endef
 
+
 define $(package)_preprocess_cmds
-  patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-1.patch && \
-  patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-2.patch && \
   echo "using $(boost_toolset_$(host_os)) : : $($(package)_cxx) : <cxxflags>\"$($(package)_cxxflags) $($(package)_cppflags)\" <linkflags>\"$($(package)_ldflags)\" <archiver>\"$(boost_archiver_$(host_os))\" <striper>\"$(host_STRIP)\"  <ranlib>\"$(host_RANLIB)\" <rc>\"$(host_WINDRES)\" : ;" > user-config.jam
 endef
 
diff -uNr libbitcoind_orig/src/bitcoind.cpp libbitcoind/src/bitcoind.cpp
--- libbitcoind_orig/src/bitcoind.cpp	2015-10-24 10:06:16.000000000 +0700
+++ libbitcoind/src/bitcoind.cpp	2016-01-02 00:48:17.000000000 +0700
@@ -175,6 +175,7 @@
     return fRet;
 }
 
+#if !ENABLE_DAEMONLIB
 int main(int argc, char* argv[])
 {
     SetupEnvironment();
@@ -184,3 +185,4 @@
 
     return (AppInit(argc, argv) ? 0 : 1);
 }
+#endif
diff -uNr libbitcoind_orig/src/init.cpp libbitcoind/src/init.cpp
--- libbitcoind_orig/src/init.cpp	2015-12-05 17:12:05.000000000 +0700
+++ libbitcoind/src/init.cpp	2016-01-02 00:48:17.000000000 +0700
@@ -552,21 +552,6 @@
         umask(077);
     }
 
-    // Clean shutdown on SIGTERM
-    struct sigaction sa;
-    sa.sa_handler = HandleSIGTERM;
-    sigemptyset(&sa.sa_mask);
-    sa.sa_flags = 0;
-    sigaction(SIGTERM, &sa, NULL);
-    sigaction(SIGINT, &sa, NULL);
-
-    // Reopen debug.log on SIGHUP
-    struct sigaction sa_hup;
-    sa_hup.sa_handler = HandleSIGHUP;
-    sigemptyset(&sa_hup.sa_mask);
-    sa_hup.sa_flags = 0;
-    sigaction(SIGHUP, &sa_hup, NULL);
-
 #if defined (__SVR4) && defined (__sun)
     // ignore SIGPIPE on Solaris
     signal(SIGPIPE, SIG_IGN);
diff -uNr libbitcoind_orig/src/init.h libbitcoind/src/init.h
--- libbitcoind_orig/src/init.h	2015-10-24 10:06:16.000000000 +0700
+++ libbitcoind/src/init.h	2016-01-02 00:48:17.000000000 +0700
@@ -17,6 +17,11 @@
 
 extern CWallet* pwalletMain;
 
+#if ENABLE_DAEMONLIB
+#include <boost/filesystem/path.hpp>
+#include <boost/thread/mutex.hpp>
+#endif
+
 void StartShutdown();
 bool ShutdownRequested();
 void Shutdown();
diff -uNr libbitcoind_orig/src/main.cpp libbitcoind/src/main.cpp
--- libbitcoind_orig/src/main.cpp	2015-12-05 11:42:07.000000000 +0700
+++ libbitcoind/src/main.cpp	2016-01-02 01:24:36.000000000 +0700
@@ -1108,6 +1108,7 @@
 
         // Store transaction in memory
         pool.addUnchecked(hash, entry);
+        GetNodeSignals().TxToMemPool(tx); 
     }
 
     SyncWithWallets(tx, NULL);
diff -uNr libbitcoind_orig/src/Makefile.am libbitcoind/src/Makefile.am
--- libbitcoind_orig/src/Makefile.am	2015-12-05 11:10:15.000000000 +0700
+++ libbitcoind/src/Makefile.am	2016-01-02 01:44:45.000000000 +0700
@@ -1,6 +1,12 @@
 DIST_SUBDIRS = secp256k1
 AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS)
 
+noinst_LTLIBRARIES =
+libbitcoind_la_LIBADD =
+libbitcoind_la_LDFLAGS = -no-undefined
+STATIC_BOOST_LIBS =
+STATIC_BDB_LIBS =
+STATIC_EXTRA_LIBS = $(STATIC_BOOST_LIBS) $(LIBLEVELDB) $(LIBMEMENV)
 
 if EMBEDDED_LEVELDB
 LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/include
@@ -49,16 +55,16 @@
 EXTRA_LIBRARIES += libbitcoin_wallet.a
 endif
 
-if BUILD_BITCOIN_LIBS
-lib_LTLIBRARIES = libbitcoinconsensus.la
-LIBBITCOIN_CONSENSUS=libbitcoinconsensus.la
-else
-LIBBITCOIN_CONSENSUS=
-endif
-
+LIBBITCOIN_CONSENSUS =
 bin_PROGRAMS =
 TESTS =
 
+if BUILD_BITCOIN_LIBS
+noinst_LTLIBRARIES += libbitcoinconsensus.la
+LIBBITCOIN_CONSENSUS += libbitcoinconsensus.la
+endif
+
+if !ENABLE_DAEMONLIB
 if BUILD_BITCOIND
   bin_PROGRAMS += safecoind
 endif
@@ -66,6 +72,9 @@
 if BUILD_BITCOIN_UTILS
   bin_PROGRAMS += safecoin-cli safecoin-tx
 endif
+else
+noinst_LTLIBRARIES += libbitcoind.la
+endif
 
 .PHONY: FORCE
 # bitcoin core #
@@ -157,8 +166,11 @@
 	@$(MKDIR_P) $(builddir)/obj
 	@$(top_srcdir)/share/genbuild.sh $(abs_top_builddir)/src/obj/build.h \
 	  $(abs_top_srcdir)
-libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h
 
+ARCH_PLATFORM = $(shell ../../bin/variables.sh host)
+
+libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h
+clientversion.cpp: obj/build.h
 # server: shared between bitcoind and bitcoin-qt
 libbitcoin_server_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS)
 libbitcoin_server_a_SOURCES = \
@@ -294,6 +306,16 @@
 #
 
 # safecoind binary #
+safecoind_SOURCES = bitcoind.cpp
+
+libbitcoind_la_SOURCES = bitcoind.cpp
+libbitcoind_la_SOURCES += $(libbitcoin_util_a_SOURCES)
+libbitcoind_la_SOURCES += $(libbitcoin_univalue_a_SOURCES)
+libbitcoind_la_SOURCES += $(libbitcoin_crypto_a_SOURCES)
+libbitcoind_la_SOURCES += $(libbitcoin_common_a_SOURCES)
+libbitcoind_la_SOURCES += $(libbitcoin_server_a_SOURCES)
+libbitcoind_la_SOURCES += $(crypto_libbitcoin_crypto_a_SOURCES)
+libbitcoind_la_SOURCES += $(univalue_libbitcoin_univalue_a_SOURCES)
 safecoind_LDADD = \
   $(LIBBITCOIN_SERVER) \
   $(LIBBITCOIN_COMMON) \
@@ -306,18 +328,32 @@
 
 if ENABLE_WALLET
 safecoind_LDADD += libbitcoin_wallet.a
+STATIC_EXTRA_LIBS += $(STATIC_BDB_LIBS)
+libbitcoind_la_SOURCES += $(libbitcoin_wallet_a_SOURCES)
 endif
-safecoind_SOURCES = bitcoind.cpp
+
+STATIC_BOOST_LIBS += ../depends/$(ARCH_PLATFORM)/lib/libboost_filesystem-mt.a ../depends/$(ARCH_PLATFORM)/lib/libboost_system-mt.a ../depends/$(ARCH_PLATFORM)/lib/libboost_chrono-mt.a ../depends/$(ARCH_PLATFORM)/lib/libboost_thread-mt.a ../depends/$(ARCH_PLATFORM)/lib/libboost_program_options-mt.a
+STATIC_BDB_LIBS += ../depends/$(ARCH_PLATFORM)/lib/libdb_cxx.a
+
 #
 
 if TARGET_WINDOWS
 safecoind_SOURCES += bitcoind-res.rc
+libbitcoind_la_SOURCES += bitcoind-res.rc
 endif
 
 safecoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)
 safecoind_CPPFLAGS = $(BITCOIN_INCLUDES)
 safecoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)
 
+libbitcoind_la_LIBADD += $(SSL_LIBS) $(LIBSECP256K1) $(CRYPTO_LIBS) $(STATIC_EXTRA_LIBS)
+libbitcoind_la_CPPFLAGS = $(BITCOIN_INCLUDES)
+if TARGET_DARWIN
+libbitcoind_la_LDFLAGS += -Wl,-all_load
+else
+libbitcoind_la_LDFLAGS += -Wl,--whole-archive $(STATIC_EXTRA_LIBS) -Wl,--no-whole-archive
+endif
+
 # bitcoin-cli binary #
 safecoin_cli_LDADD = \
   $(LIBBITCOIN_CLI) \
diff -uNr libbitcoind_orig/src/net.cpp libbitcoind/src/net.cpp
--- libbitcoind_orig/src/net.cpp	2015-10-24 10:06:16.000000000 +0700
+++ libbitcoind/src/net.cpp	2016-01-02 00:48:17.000000000 +0700
@@ -460,8 +460,10 @@
         LogPrint("net", "send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\n", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), addrYou.ToString(), id);
     else
         LogPrint("net", "send version message: version %d, blocks=%d, us=%s, peer=%d\n", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);
+    std::vector<std::string> bitcore;
+    bitcore.push_back("bitcore"); //the dash character is removed from the comments section
     PushMessage("version", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,
-                nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>()), nBestHeight, true);
+                nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, bitcore), nBestHeight, true);
 }
 
 
diff -uNr libbitcoind_orig/src/net.h libbitcoind/src/net.h
--- libbitcoind_orig/src/net.h	2015-12-05 11:48:03.000000000 +0700
+++ libbitcoind/src/net.h	2016-01-02 01:46:54.000000000 +0700
@@ -66,6 +66,8 @@
 {
     boost::signals2::signal<int ()> GetHeight;
     boost::signals2::signal<bool (CNode*)> ProcessMessages;
+    boost::signals2::signal<bool (const CTransaction&)> TxToMemPool;
+    boost::signals2::signal<bool (const CTransaction&)> TxLeaveMemPool;
     boost::signals2::signal<bool (CNode*, bool)> SendMessages;
     boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;
     boost::signals2::signal<void (NodeId)> FinalizeNode;
diff -uNr libbitcoind_orig/src/txmempool.cpp libbitcoind/src/txmempool.cpp
--- libbitcoind_orig/src/txmempool.cpp	2015-10-24 10:06:16.000000000 +0700
+++ libbitcoind/src/txmempool.cpp	2016-01-02 00:48:17.000000000 +0700
@@ -463,6 +463,7 @@
             if (!mapTx.count(hash))
                 continue;
             const CTransaction& tx = mapTx[hash].GetTx();
+            GetNodeSignals().TxLeaveMemPool(tx);
             if (fRecursive) {
                 for (unsigned int i = 0; i < tx.vout.size(); i++) {
                     std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));
